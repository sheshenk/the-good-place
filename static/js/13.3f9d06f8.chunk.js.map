{"version":3,"sources":["views/projects/Stories.js"],"names":["StoriesCard","props","item","xs","href","sx","maxWidth","title","subheader","date","component","height","image","img","alt","variant","color","mb","author","desc","disableSpacing","Stories","useAuthListener","loggedIn","checkingStatus","useState","stories","setStories","setTitle","setImg","body","setBody","externalLink","setExternalLink","open","setOpen","useEffect","getStories","a","firebaseSvc","allStoriesFromDb","snapshot","val","Object","values","noValidate","autoComplete","onSubmit","e","preventDefault","data","getUserName","Date","now","toLocaleString","split","addStoryToDb","container","spacing","style","width","label","onChange","event","target","value","multiline","rows","size","margin","mt","type","autoHideDuration","message","onClose","severity","reverse","map","proj","to"],"mappings":"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","file":"static/js/13.3f9d06f8.chunk.js","sourcesContent":["\n// material-ui\nimport { Alert, Box, Button, Card, CardContent, CircularProgress, Grid, Snackbar, TextField, Typography } from '@mui/material';\nimport { CardActions, CardHeader, CardMedia, IconButton } from '@mui/material';\n\n\n// project imports\nimport MainCard from 'ui-component/cards/MainCard';\nimport firebaseSvc, { useAuthListener } from 'views/firebaseAuth/firebaseSvc';\nimport { Navigate } from 'react-router';\nimport { useEffect, useState } from 'react';\nimport { ShareOutlined } from '@mui/icons-material';\nimport { IconHeart } from '@tabler/icons';\n\n\n\nconst StoriesCard = (props) => {\n    return (\n        <Grid item xs={3}>\n            <a href={props.href}>\n                <Card sx={{ maxWidth: '100%' }}>\n                    <CardHeader\n                        title={props.title}\n                        subheader={props.date}\n                    />\n                    <CardMedia\n                        component=\"img\"\n                        height=\"194\"\n                        image={props.img}\n                        alt=\"\"\n                    />\n                    <CardContent>\n                        <Typography variant=\"h5\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                            {props.author === '' ? \"\" : `By ${props.author}`}\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"#000\">\n                            {props.desc}\n                        </Typography>\n                    </CardContent>\n                    <CardActions disableSpacing>\n                        <IconButton aria-label=\"add project\">\n                            <IconHeart />\n                        </IconButton>\n                        <IconButton aria-label=\"share\">\n                            <ShareOutlined />\n                        </IconButton>\n                    </CardActions>\n                </Card>\n            </a>\n        </Grid>\n    );\n}\n\nconst Stories = () => {\n    const { loggedIn, checkingStatus } = useAuthListener();\n\n    const [stories, setStories] = useState([])\n\n    const [title, setTitle] = useState('')\n    const [img, setImg] = useState('')\n    const [body, setBody] = useState('')\n    const [externalLink, setExternalLink] = useState('')\n    const [open, setOpen] = useState(false)\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        if (title && body) {\n            const data = {\n                'title': title,\n                'img': img,\n                'desc': body,\n                'author': firebaseSvc.getUserName(),\n                'date': new Date(Date.now()).toLocaleString().split(',')[0],\n                'href': externalLink\n            }\n            firebaseSvc.addStoryToDb(data)\n        } else {\n            setOpen(true)\n        }\n    }\n\n    useEffect(() => {\n        const getStories = async () => {\n            await firebaseSvc.allStoriesFromDb((snapshot) => {\n                let stories = snapshot.val()\n                setStories(Object.values(stories))\n            })\n        }\n        getStories()\n    }, [])\n\n    if (checkingStatus) return <CircularProgress/>\n\n    if (!loggedIn) return <Navigate to='/login' />\n\n    return (\n        <Box>\n            <MainCard title=\"Write your own story!\" sx={{ mb: 2 }}>\n                <form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n                    <Grid container spacing={4}>\n                        <Grid item xs={2}>\n                            <TextField\n                                variant='outlined'\n                                style={{ width: '100%' }}\n                                label=\"Title\"\n                                onChange={(event) => setTitle(event.target.value)}\n                            />\n                        </Grid>\n                        <Grid item xs={5}>\n                            <TextField\n                                variant='outlined'\n                                style={{ width: '100%' }}\n                                label=\"Image URL\"\n                                onChange={(event) => setImg(event.target.value)}\n                            />\n                        </Grid>\n                        <Grid item xs={5}>\n                            <TextField\n                                variant='outlined'\n                                style={{ width: '100%' }}\n                                label=\"Link to another page\"\n                                onChange={(event) => setExternalLink(event.target.value)}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                variant='outlined'\n                                style={{ width: '100%' }}\n                                label=\"Content\"\n                                onChange={(event) => setBody(event.target.value)}\n                                multiline\n                                rows={3}\n                            />\n                        </Grid>\n                        <Button\n                            color='inherit'\n                            size='large'\n                            sx={{\n\n                                margin: '2%',\n                                mt: 3,\n                                height: 50,\n                                width: `35%`\n                            }}\n                            variant='outlined'\n                            type='submit'\n                        >\n                            Sign Up\n                        </Button>\n                    </Grid>\n                </form>\n                <Snackbar\n                    open={open}\n                    autoHideDuration={3000}\n                    message=\"\"\n                    onClose={()=>setOpen(false)}\n                >\n                    <Alert severity=\"error\" sx={{ width: '100%' }}>\n                        Enter title and body!\n                    </Alert>\n                </Snackbar>\n            </MainCard>\n            <Grid container spacing={2}>\n                {\n                    stories.reverse().map(proj => <StoriesCard {...proj} />)\n                }\n            </Grid>\n        </Box>\n    )\n\n};\n\nexport default Stories;\n"],"sourceRoot":""}